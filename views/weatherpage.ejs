<!DOCTYPE html> 
<html>
<head>
	<title>Weather Map</title>
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<script defer src="https://maps.googleapis.com/maps/api/js?key=[Your API Key]&callback=initMap"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
	<script type="text/javascript">
		// Google map
		var map;
		// marker on the map
		var marker;
		// name of the selected location
		var loc;
		// current weather object
		var weather;
		// True = celsius, False = farenheit
		var temp = true;
		// array of 7-day weather forecast objects
		var days;
		
		// Initializing the map
		var initMap = function() {
			const styledMapType = new google.maps.StyledMapType(
				[
					{ elementType: "geometry", stylers: [{ color: "#242f3e" }] },
					{ elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
					{ elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
					{
					featureType: "administrative.locality",
					elementType: "labels.text.fill",
					stylers: [{ color: "#d59563" }],
					},
					{
					featureType: "poi",
					elementType: "labels.text.fill",
					stylers: [{ color: "#d59563" }],
					},
					{
					featureType: "poi.park",
					elementType: "geometry",
					stylers: [{ color: "#263c3f" }],
					},
					{
					featureType: "poi.park",
					elementType: "labels.text.fill",
					stylers: [{ color: "#6b9a76" }],
					},
					{
					featureType: "road",
					elementType: "geometry",
					stylers: [{ color: "#38414e" }],
					},
					{
					featureType: "road",
					elementType: "geometry.stroke",
					stylers: [{ color: "#212a37" }],
					},
					{
					featureType: "road",
					elementType: "labels.text.fill",
					stylers: [{ color: "#9ca5b3" }],
					},
					{
					featureType: "road.highway",
					elementType: "geometry",
					stylers: [{ color: "#746855" }],
					},
					{
					featureType: "road.highway",
					elementType: "geometry.stroke",
					stylers: [{ color: "#1f2835" }],
					},
					{
					featureType: "road.highway",
					elementType: "labels.text.fill",
					stylers: [{ color: "#f3d19c" }],
					},
					{
					featureType: "transit",
					elementType: "geometry",
					stylers: [{ color: "#2f3948" }],
					},
					{
					featureType: "transit.station",
					elementType: "labels.text.fill",
					stylers: [{ color: "#d59563" }],
					},
					{
					featureType: "water",
					elementType: "geometry",
					stylers: [{ color: "#17263c" }],
					},
					{
					featureType: "water",
					elementType: "labels.text.fill",
					stylers: [{ color: "#515c6d" }],
					},
					{
					featureType: "water",
					elementType: "labels.text.stroke",
					stylers: [{ color: "#17263c" }],
					},
				],
				{ name: "Styled Map" }
			);
			var myOptions = {
				center: new google.maps.LatLng(39.952335,-75.163789),
				zoom: 5, 
				mapTypeId: google.maps.MapTypeId.ROADMAP
			};
			map = new google.maps.Map(document.getElementById('map'),
				    myOptions);
			map.mapTypes.set("styled_map", styledMapType);
  			map.setMapTypeId("styled_map");
		
			if (marker != null) {
				marker.setMap(map);
			}
			google.maps.event.addListener(map, 'click', function(event) {
				document.getElementById('latitude').value = event.latLng.lat();
				document.getElementById('longitude').value = event.latLng.lng();
				if (marker != null){
					marker.setMap(null);
				}
				displayMarker(event.latLng.lat(), event.latLng.lng())
			});
		};
		function displayMarker(latitude, longitude) {
			// Initializing marker
			marker = new google.maps.Marker({
		 						position: new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude)),
			 					draggable: false,
			 					map,
			 					icon: {
			 						url: "http://maps.google.com/mapfiles/ms/icons/yellow-dot.png" // yellow marker
			 					}
		 					});
			// show marker on the map
			marker.setMap(map);
		}
		// Creates 7-day weather forecast HTML elements
		function setWeatherForecast(today, months, days, day, celsius) {
			today.setDate(today.getDate() + 1);
					var dd = String(today.getDate()).padStart(2, '0');
					var mm = months[today.getMonth()]; //January is 0!
					var yyyy = today.getFullYear();
					today_d = mm + " " + dd + ', ' + yyyy;
					var descript = days[day-2]["weather"][0]["description"]
					var id_1 = "d" + day;
					var id_2 = "d" + day + "_t";
					var id_3 = "temp" + "_" + day;
					var emoji_p = ""
					if (descript.toLowerCase().includes("sun") || descript.toLowerCase().includes("clear")) {
						emoji_p = "../styles/Sun.png" 
					} else if (descript.toLowerCase().includes("cloud")) {
						emoji_p = "../styles/Clouds.png"
					} else if (descript.toLowerCase().includes("rain")) {
						emoji_p = "../styles/Rain.png"
					} else if (descript.toLowerCase().includes("snow")) {
						emoji_p = "../styles/Snow.png"
					}
					document.getElementById(id_1).innerHTML = `${today_d}`;
					if (celsius) {
						document.getElementById(id_2).innerHTML = ` <img id="weather-pic" src=${emoji_p}></img><br>
																${descript[0].toUpperCase() + descript.slice(1).toLowerCase()} <br>
																<p id=${id_3}> Highest temp: ${Number(days[day-2]["temp"]["max"] - 273.15).toFixed(1) + " °C"} <br>
																Lowest temp: ${Number(days[day-2]["temp"]["min"] - 273.15).toFixed(1) + " °C</p>"}
															`;
					} else {
						document.getElementById(id_2).innerHTML = ` <img id="weather-pic" src=${emoji_p}></img><br>
																${descript[0].toUpperCase() + descript.slice(1).toLowerCase()} <br>
																<p id=${id_3}>Highest temp: ${Number((days[day-2]["temp"]["max"] - 273.15) * 9/5 + 32).toFixed(1) + " °F"} <br>
																Lowest temp: ${Number((days[day-2]["temp"]["min"] - 273.15) * 9/5 + 32).toFixed(1) + " °F</p>"}
															`;
					}
		}
		// Converts each weather forecast html object to display celsius or fahrenheit, depending which one was chosen
		function updateWeatherForecast(days, i) {
			var id = "temp_" + i;
			if (temp) {
				document.getElementById(id).innerHTML = `
															Highest temp: ${Number(days[i-2]["temp"]["max"] - 273.15).toFixed(1) + " °C"} <br>
															Lowest temp: ${Number(days[i-2]["temp"]["min"] - 273.15).toFixed(1) + " °C"}
														`;
			} else {
				document.getElementById(id).innerHTML = `
															Highest temp: ${Number((days[i-2]["temp"]["max"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
															Lowest temp: ${Number((days[i-2]["temp"]["min"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"}
														`;
			}
		}
		$(document).ready(function() {
			// event listener for fahrenheit btn
			$("#farenheit").on("click", function(){
				
				// changes the background color of the btns
				$("#farenheit").addClass("active");
				$("#celsius").removeClass("active");
				
				temp = false;
				
				// changes the current temperature to fahrenheit
				document.getElementById("weather-details").innerHTML = `
							Feels like: ${Number((weather["feels_like"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
							Description: ${cloud} <br>
							Humidity: ${weather["humidity"]} <br>
							Temperature High: ${Number((weather["temp_max"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
							Temperature Low: ${Number((weather["temp_min"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
							<div class="form-group mx-sm-3 mb-2">
									<button id="back" class="btn btn-light">Go back</button>
							</div>
				`	
				
				// changing for the first day in the 7-day forecast
				document.getElementById("temps_1").innerHTML = `
														Highest temp: ${Number((days[6]["temp"]["max"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
														Lowest temp: ${Number((days[6]["temp"]["min"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"}
													`;
				// updating rest of the forecasts to show temperatures in fahrenheit 
				var i;
				for (i = 2; i < 8; i ++) {
					updateWeatherForecast(days, i);
				}
				// adding this event listener for back button again to ensure that the buttons functions as it should after re-adding
				$('#back').on("click", function() {
						$(".sub-info").css("display", "flex");
						$(".card").css("display", "none");
						$(".background-2").css("display", "none");
						$("#arrow").css("display", "none");
				});
			})
			// event listener for celsius btn
			$("#celsius").on("click", function(){
				// changes the background color of the btns
				$("#celsius").addClass("active");
				$("#farenheit").removeClass("active");
				temp = true;
				// changes the current temperature to fahrenheit
				document.getElementById("weather-details").innerHTML = `
							Feels like: ${Number(weather["feels_like"] - 273.15).toFixed(1) + " °C"} <br>
							Description: ${cloud} <br>
							Humidity: ${weather["humidity"]} <br>
							Temperature High: ${Number(weather["temp_max"] - 273.15).toFixed(1) + " °C"} <br>
							Temperature Low: ${Number(weather["temp_min"] - 273.15).toFixed(1) + " °C"} <br>
							<div class="form-group mx-sm-3 mb-2">
									<button id="back" class="btn btn-light">Go back</button>
							</div>
				` 
				// changing for the first day in the 7-day forecast
				document.getElementById("temps_1").innerHTML = `Highest temp: ${Number(days[6]["temp"]["max"] - 273.15).toFixed(1) + " °C"} <br>
														Lowest temp: ${Number(days[6]["temp"]["min"] - 273.15).toFixed(1) + " °C"}
													`;
				var i;
				for (i = 2; i < 8; i ++) {
					updateWeatherForecast(days, i);
				}
				
				// again, adding the event listener for the back btn
				$('#back').on("click", function() {
						$(".sub-info").css("display", "flex");
						$(".card").css("display", "none");
						$(".background-2").css("display", "none");
						$("#arrow").css("display", "none");
				});
			})
			// document.onscroll = function() {
			// 	if (window.innerHeight + window.scrollY > document.body.clientHeight) {
			// 		document.getElementById("arrow").css("display",'none');
			// 	}
			// }
			
			// hiding the current weather HTML elements in the beginning
			$(".card").css("display", "none");
			// hiding the forecast HTML elements, as well as the arrow to navigate to the forecast elements
			$(".background-2").css("display", "none");
			$("#arrow").css("display", "none");
			
			// event listener for "Check" button, which shows the weather for the location when clicked
			$('#update').on("click", function() {
				var latitude = document.getElementById("latitude").value;
				var longitude = document.getElementById("longitude").value;
				// hiding the longitude and latitude elements
				$(".sub-info").css("display", "none");
				// displaying the current weather and forecast elements now
				$(".card").css("display", "flex");
				$(".background-2").css("display", "flex");
				// API Call to get the current weather 
				$.getJSON('https://api.openweathermap.org/data/2.5/weather?', {
					lat: latitude,
					lon: longitude,
					appid: "[Your API Key]"
				}, function(data) {
					console.log(data)
					loc = data["name"]
					weather = data["main"]
					cloud = data["weather"][0]["description"]
					document.getElementById("weather-card").innerHTML = `Weather for ${loc} right now`;
					document.getElementById("seven-forecast").innerHTML = `Daily`
					// Checking if the weather should be in fahrenheit or celsius
					if (temp) {
						document.getElementById("weather-details").innerHTML = `
						Feels like: ${Number(weather["feels_like"] - 273.15).toFixed(1) + " °C"} <br>
						Description: ${cloud} <br>
						Humidity: ${weather["humidity"]} <br>
						Temperature High: ${Number(weather["temp_max"] - 273.15).toFixed(1) + " °C"} <br>
						Temperature Low: ${Number(weather["temp_min"] - 273.15).toFixed(1) + " °C"} <br>
						<div class="form-group mx-sm-3 mb-2">
								<button id="back" class="btn btn-light">Go back</button>
						</div>
					`
					} else {
						document.getElementById("weather-details").innerHTML = `
						Feels like: ${Number((weather["feels_like"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
						Description: ${cloud} <br>
						Humidity: ${weather["humidity"]} <br>
						Temperature High: ${Number((weather["temp_max"] - 273.15).toFixed(1)* 9/5 + 32) + " °F"} <br>
						Temperature Low: ${Number((weather["temp_min"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
						<div class="form-group mx-sm-3 mb-2">
								<button id="back" class="btn btn-light">Go back</button>
						</div>
					`
					}
					
					// displaying designs based on the weather 
					if (cloud.toLowerCase().includes("cloud")) {
						$("#me").attr('src',"../styles/Potato_Cloud.gif");
					} else if (cloud.toLowerCase().includes("rain")) {
						$("#me").attr('src',"../styles/Potato_Rainy.gif");
					} else if (cloud.toLowerCase().includes("sun") || cloud.toLowerCase().includes("clear") ) {
						$("#me").attr('src',"../styles/Potato_Sunny.png");
						$("#me").css("width", "20vw");
					} else if (cloud.toLowerCase().includes("snow")) {
						$("#me").attr('src',"../styles/Potato_Snow.png");
					}

					$('#back').on("click", function() {
						$(".sub-info").css("display", "flex");
						$(".card").css("display", "none");
						$(".background-2").css("display", "none");
						$("#arrow").css("display", "none");
					});
				});
				// Get 7-day forecast using a different API
				// Could have used this for current weather too but this API does not include the location name
				$.getJSON('https://api.openweathermap.org/data/2.5/onecall?',  {
					lat: latitude,
					lon: longitude,
					appid: "[Your API Key]"
				}, function(data) {
					console.log(data)
					var weather_l = data["daily"]
					day_1 = weather_l[1]
					day_2 = weather_l[2]
					day_3 = weather_l[3]
					day_4 = weather_l[4]
					day_5 = weather_l[5]
					day_6 = weather_l[6]
					day_7 = weather_l[7]
					var months = [ "January", "February", "March", "April", "May", "June",
									"July", "August", "September", "October", "November", "December" ];	
					days = [day_2, day_3, day_4, day_5, day_6, day_7, day_1]
					// Set dates 
					// day 1
					var today = new Date();
					var dd = String(today.getDate()).padStart(2, '0');
					var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
					var yyyy = today.getFullYear();
					today_d = mm + '/' + dd + '/' + yyyy;
					var descript = day_1["weather"][0]["description"]
					var emoji_p = ""
					if (descript.toLowerCase().includes("sun") || descript.toLowerCase().includes("clear")) {
						emoji_p = "../styles/Sun.png" 
					} else if (descript.toLowerCase().includes("cloud")) {
						emoji_p = "../styles/Clouds.png"
					} else if (descript.toLowerCase().includes("rain")) {
						emoji_p = "../styles/Rain.png"
					} else if (descript.toLowerCase().includes("snow")) {
						emoji_p = "../styles/Snow.png"
					}
					
					if (temp) {
						document.getElementById("d1").innerHTML = `Tomorrow`;
						document.getElementById("d1_t").innerHTML = ` <img id="weather-pic" src=${emoji_p}></img><br>
																${descript[0].toUpperCase() + descript.slice(1).toLowerCase()} <br>
																<p id="temps_1">Highest temp: ${Number(day_1["temp"]["max"] - 273.15).toFixed(1) + " °C"} <br>
																Lowest temp: ${Number(day_1["temp"]["min"] - 273.15).toFixed(1) + " °C</p>"}
															`;
					} else {
						document.getElementById("d1").innerHTML = `Tomorrow`;
						document.getElementById("d1_t").innerHTML = ` <img id="weather-pic" src=${emoji_p}></img><br>
																${descript[0].toUpperCase() + descript.slice(1).toLowerCase()} <br>
																<p id="temps_1">Highest temp: ${Number((day_1["temp"]["max"] - 273.15)* 9/5 + 32).toFixed(1) + " °F"} <br>
																Lowest temp: ${Number((day_1["temp"]["min"] - 273.15)* 9/5 + 32).toFixed(1) + " °F</p>"}
															`;
					}
					var i;
					for (i = 2; i < 8; i ++) {
						setWeatherForecast(today, months, days, i, temp);
					}
					// show the arrow now!
					$("#arrow").css("display", "flex");
				});
			})
		});
	</script>
	<style>
		p {
			margin: 0;
		}
		.background {
			/* background-image: linear-gradient(#61B5D5, #8D61D5, #F3B8C9); */
			background-image: url("../styles/background-2.png");
			background-size: 100vw 100vh;
			height: 100vh;
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
		}
		#map {
			height: 60vh;
			width: 60vh;
			border-radius: 30px;
			margin-right: 5vw;
		}
		.sub-background {
			background : rgba(250, 250, 250, 0.7);
			border-radius: 30px;
			width: 95vw;
			display: flex;
			flex-direction: row;
			justify-content: center;
			align-items: center;
			height: 70vh;
		}
		#info {
			display: flex;
			flex-direction: row;
			border-radius: 30px;
			width: 50vw;
		}
		#me {
			height: 32vw;
		}
		#instruction {
			font-size: 3vh;
			width: 25vw;
			text-align: center;
		}
		.sub-info {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
		}
		
		#weather-card {
			font-size: 5vh;
			text-align: center;
		}
		input[type=text] {
			background-color: transparent;
			box-shadow: inset 0px 0px 0px 0px red;
			outline-color: black;
			outline: 0;
		}
		input {
			border: 0;
			outline: 0;
			border-bottom: 2px solid black;
		}
		input[type=text]:focus{
			outline: none;     
		}
		.loc-form {
			display: flex;
			flex-direction: column;
			justify-content: space-evenly;
			height: 14vh;
		}
		.card {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
		}
		#weather-details {
			font-size: 2vh;
			text-align: center;
		}
		#back {
			margin-top: 1vh;
		}
		.background-2 {
			/* background-image: linear-gradient(#61B5D5, #8D61D5, #F3B8C9); */
			background-image: url("../styles/background-2\ copy.png");
			background-size: 100vw 100vh;
			height: 50vh;
			display: flex; 
			flex-direction: column;
			justify-content: flex-start;
			align-items: center;
		}
		
		.forecast {
			display: flex;
			flex-flow: row wrap;
			justify-content: space-around;
			align-items: center;
			flex: auto;
			/* flex: 2 1 auto; */
			max-width: 95vw;
			flex-shrink: 0;
			flex-wrap: wrap;
			margin-right: 0px;
			padding: 0px;
		}
		#fore {
			background : rgba(250,250,250, 0.7);
			height: 33vh;
			border-radius: 30px;
			width: 12vw;
			margin-left: 10px;
			margin-right: 10px;
			margin-bottom: 10px;
			flex-shrink: 0;
			flex-wrap: wrap;
			/* margin-left: 2vw; */
			padding-bottom: 20px;
			padding-top: 20px;
			opacity: 0.7;
			transition: all .2s ease-in-out;
		}
		#fore:hover {
			opacity: 1.0;
			transform: scale(1.1); 
		}
		#weather-pic {
			width: 13vh;
			height: 13vh;
			display: block;
			margin-left: auto;
			margin-right: auto;
			background-color: rgba(0,0,0, 0.3);
			border-radius: 30px;
		}
		/* #fore-1 {
			background : rgba(250, 250, 250, 0.7);
			height: 30vh;
			border-radius: 100%;
			width: 30vh;
		}
		 */
		#d1, #d2, #d3, #d4, #d5, #d6, #d7 {
			/* background-image: radial-gradient(white,); */
			/* linear-gradient(0.25turn, #0B1345, #ebf8e1, #f69d3c); */
			border: medium solid #0B1345;
			text-align: center;
			padding: 8px;
			border-radius: 30px;
			margin-top: 7px;
		}
		#seven-forecast {
			font-size: 3vh;
			font-weight: 400;
			overflow: hidden;
			margin-left: 1vw;
		}
		@keyframes bouncing {
			0% {bottom: 1vh;}
			50% {bottom: 2vh;}
			100% {bottom: 1vh;}
		}
		#arrow {
			/* animation: bouncing 1s infinite ease-in-out; */
			bottom: 0vh;
			display: flex;
			width: 6vh;
			height: 6vh;
			justify-content: center;
			align-items: center;
			position: fixed;
			font-family: 'Mandali', sans-serif;
			border-radius: 100%;
			text-decoration: none;
			margin-bottom: 1vh;
			/* border-right: 1mm solid black;
			border-left: 1mm solid black; */
		}
		#arrow-bkg {
			animation: bouncing 1s infinite ease-in-out;
			bottom: 0vh;
			display: flex;
			width: 100%;
			background-color:rgba(250, 244, 240, 0.7);
			justify-content: center;
			width: 7vh;
			height: 7vh;
			border: 3px solid black;
			align-items: center;
			border-radius: 100%;
			position: fixed;
			font-family: 'Mandali', sans-serif;
		}
		#arrow p {
			font-size: 4vh;
			color: black;
			text-align: center;
		}
		#arrow p:hover {
			color: white;
		}
		.sub-background-2 {
			border-radius: 30px;
			width: 95vw;
			height: 40vh;
			padding-top: 2vh;
			padding-bottom: 2vh;
		}
		.active, #celsius:hover, #farenheit:hover {
			background-color: #666;
			color: white;
		}
		
		#farenheit, #celsius {
			margin-top: 1vh;
		}
	  </style>  
</head>
<body>
   <div class="background">
	 	<div class="sub-background">
			<div>
				<div class="container bg-light" id="info">
					<p class="text-muted">
						<img id="me" src="../styles/Potato_Anim-2.gif"></img>
						<div class="sub-info">
							<p id="instruction" style='margin-bottom: 0; padding-top: 2%;'> Click any location on the map or manually add latitude and longitude values! </p>
							<br>
							<div class="form-inline loc-form" style="align-items: center;">
								<div class="form-group mx-sm-3 mb-2">
									<label for="latitudeInput"></label>
									<input id="latitude" type="text" autocomplete="off" name="latitude" placeholder="Enter latitude" required>
								</div>
								<div class="form-group mx-sm-3 mb-2">
									<label for="longitude"></label>
									<input id="longitude" type="text" autocomplete="off" name="longitude" placeholder="Enter longitude" required>
								</div>
								<div class="form-group mx-sm-3 mb-2">
									<button id="update" class="btn btn-light">Check</button>
								</div>
							</div>
						</div>
					</p>
					<div class="card" style="width: 35vw;">
						<div class="card-body">
							<h5 class="card-title" id="weather-card"></h5>
							<p class="card-text" id="weather-details"></p>
						</div>
					</div>
				</div>
			</div>
			<div id="map"></div>
	 	</div>
		<div class="btn-group" role="group" aria-label="Basic example">
			<button type="button" class="btn btn-secondary" id="celsius">°C</button>
			<button type="button" class="btn btn-secondary" id="farenheit">°F</button>
	  	</div>
		 <a id="arrow" href="#seven-forecast">
			<div id="arrow-bkg">
				<p id="arrow-p">
					v
				</p>
			</div>
		</a>
	</div>
	<div class="background-2">
		<div class="sub-background-2">
			<p id="seven-forecast"></p>
			<div class="forecast">
				<div class="card" id="fore">
					<div class="card-body">
					<h5 class="card-title" id="d1"></h5>
					<p class="card-text" id="d1_t"></p>
					<!-- <a href="#" class="btn btn-primary">Go somewhere</a> -->
					</div>
				</div>
				<div class="card" id="fore">
					<div class="card-body">
					<h5 class="card-title" id="d2"></h5>
					<p class="card-text" id="d2_t"></p>
					</div>
				</div>
				<div class="card" id="fore">
					<div class="card-body">
					<h5 class="card-title" id="d3"></h5>
					<p class="card-text" id="d3_t"></p>
					</div>
				</div>
				<div class="card" id="fore">
					<div class="card-body">
					<h5 class="card-title" id="d4"></h5>
					<p class="card-text" id="d4_t"></p>
					</div>
				</div>
				<div class="card" id="fore">
					<div class="card-body">
					<h5 class="card-title" id="d5"></h5>
					<p class="card-text" id="d5_t"></p>
					</div>
				</div>
				<div class="card" id="fore">
					<div class="card-body">
					<h5 class="card-title" id="d6"></h5>
					<p class="card-text" id="d6_t"></p>
					</div>
				</div>
				<div class="card" id="fore">
					<div class="card-body">
					<h5 class="card-title" id="d7"></h5>
					<p class="card-text" id="d7_t"></p>
					</div>
				</div>
			</div>
		</div>
	</div>
</body>
</html>
